"use client";

import { useRouter, useSearchParams } from "next/navigation";
import React, { useEffect, useState } from "react";
import Image from "next/image";
import HomeIcon from "@/app/icons/HomeIcon";

// Temporary dev data; replace with API response in prod
const DEVELOPMENT_STORY_PAGES: StoryPage[] = [
  { citations: [], image: "/testing-anime-pics/1image.png" },
  { citations: [], image: "/testing-anime-pics/2image.png" },
  { citations: [], image: "/testing-anime-pics/3image.png" },
  { citations: [], image: "/testing-anime-pics/4image.png" },
  { citations: [], image: "/testing-anime-pics/5image.png" },
];

export default function Results() {
  const router = useRouter();
  // Retrieves URL query parameters for topic, pages, and info
  const searchParams = useSearchParams();

  // Stores the main topic/subject of the story
  const [storyTopic, setStoryTopic] = useState<string>("");
  // Stores optional additional story details/context
  const [storyAdditionalInfo, setStoryAdditionalInfo] = useState<string>("");
  // Tracks loading state while validating params
  const [loading, setLoading] = useState<boolean>(true);
  // Tracks which page of the story is currently being viewed
  const [currentPage, setCurrentPage] = useState<number>(0);
  // Holds the array of story page content (images + citations)
  const [storyPages, setStoryPages] = useState<StoryPage[]>(
    DEVELOPMENT_STORY_PAGES
  );

  useEffect(() => {
    const topic = searchParams.get("topic")?.trim();
    const pagesParam = searchParams.get("pages");
    const pages = pagesParam ? Number(pagesParam) : 0;
    const info = searchParams.get("info")?.trim();

    // Redirect home if topic or pages missing/invalid
    if (!topic || !pagesParam) {
      router.push("/");
      return;
    }
    // Enforce page count between 1 and storyPages.length
    if (pages < 1 || pages > storyPages.length) {
      router.push("/");
      return;
    }

    setStoryTopic(topic);
    if (info) setStoryAdditionalInfo(info);
    setLoading(false);
  }, [router, searchParams, storyPages.length]);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen bg-light-primary">
        Loadingâ€¦
      </div>
    );
  }

  return (
    <div className="flex flex-col min-h-screen bg-light-primary font-fun scrollbar-thin">
      {/* Header: story title and optional info */}
      <header className="p-4 shadow-lg flex items-center gap-4">
        <div
          className="transition-all duration-200 hover:-rotate-12"
          onClick={() => router.push("/")}
        >
          <HomeIcon className="text-dark border-2 border-brown-primary rounded-lg p-3 w-12 h-12 hover:scale-110 transition-all duration-300 cursor-pointer shadow-md hover:shadow-xl active:scale-95" />
        </div>
        <h1 className="text-2xl md:text-4xl font-extrabold text-brown-primary tracking-wider md:tracking-wide hover:tracking-wider transition-all duration-300 select-none">
          {/* TODO: this would be generated by AI */}
          {storyTopic}
        </h1>
      </header>

      {/* Story image: fills remaining vertical space */}
      <div className="relative flex-grow w-full max-w-md mx-auto px-5 py-2 custom-scrollbar">
        <Image
          src={storyPages[currentPage].image}
          alt={`Story page ${currentPage + 1}`}
          height={100}
          width={500}
          className="object-contain border-4 border-brown-primary rounded-2xl shadow-story-page-card"
        />
      </div>

      {/* Footer nav: prev/next buttons with page indicator */}
      <nav className="flex items-center justify-between p-4 bg-light-secondary">
        <button
          onClick={() => setCurrentPage((p) => Math.max(0, p - 1))}
          disabled={currentPage === 0}
          className="px-6 py-2 bg-brown-primary text-light rounded-full shadow-lg hover:scale-105 disabled:opacity-50 transition"
        >
          Previous
        </button>
        <span className="text-brown-primary">
          {currentPage + 1} / {storyPages.length}
        </span>
        <button
          onClick={() =>
            setCurrentPage((p) => Math.min(storyPages.length - 1, p + 1))
          }
          disabled={currentPage === storyPages.length - 1}
          className="px-6 py-2 bg-brown-primary text-light rounded-full shadow-lg hover:scale-105 disabled:opacity-50 transition"
        >
          Next
        </button>
      </nav>
    </div>
  );
}
